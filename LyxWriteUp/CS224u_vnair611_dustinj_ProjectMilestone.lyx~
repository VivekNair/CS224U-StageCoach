#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\rightmargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Structured Relationship Extraction from Theatrical Works using StageCoach
 
\end_layout

\begin_layout Author
Vivek Nair and Dustin A.
 Janatpou
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Initially, the goal for our project was to extend the social network extraction
 research of Elson et.
 al.
 on 19th century British fiction to theatrical works.
 These works often contain dialogue with attached attributions, stage directions
 for specific characters, and other structured information that allows for
 the direct creation of social networks without the use of Named Entity
 Recognition or extensive coreference resolution.
\end_layout

\begin_layout Standard
However, we quickly realized that there is currently no existing relational
 system for storing these works in a way that exploits and represents this
 structure.
 With this in mind, we asked ourselves two fundamental questions:
\end_layout

\begin_layout Itemize
How feasible is developing a structured, in-memory representation of the
 semantic and lexical context of character relationships in a play? 
\end_layout

\begin_layout Itemize
How could we best construct this system to iteratively test hypotheses about
 these relationships?
\end_layout

\begin_layout Standard
We are currently building a system named StageCoach to answer these questions.
 The Github repository for StageCoach can be viewed publicly at the following
 URL: <
\begin_inset CommandInset href
LatexCommand href
target "https://github.com/VivekNair/CS224U-StageCoach"

\end_inset

>
\end_layout

\begin_layout Section
Previous Approaches
\end_layout

\begin_layout Standard
We primarily draw from Elson et al.
 (2010)’s paper
\begin_inset CommandInset citation
LatexCommand cite
key "elson2010extracting"

\end_inset

 on extracting social networks from 19th Century British fiction.
 This approach involves using an “adjacency” metric for relatedness wherein
 the strength of the relationship between two characters is determined by
 the number of words exchanged between them.
 We found, however, that the challenge of quote attribution in narrative
 fiction was far too complex for the scope of our project.
 Instead, we apply some of the network extraction methods discussed by Elson
 to theatrical works exactly because these works generally have built-in
 quote attribution.
\end_layout

\begin_layout Standard
Jing et al.
 (2007)
\begin_inset CommandInset citation
LatexCommand cite
key "jing2007extracting"

\end_inset

 provides more insight into constructing these character relationships by
 specifically mining dialogue (in the form of interview transcripts) to
 extract biographical and relational information.
 Again, the method’s performance is highly reliant on annotation and speaker-rol
e identification (an equivalent to quote attribution) which is build into
 the structure of theatrical works.
 From here we draw the idea of extracting relations from dialog directly
 and using these to weight or declare relationships between characters.
\end_layout

\begin_layout Standard
Other sources of inspiration for developing the system were related Information
 Extraction (IE) systems such as KnowItAll and TextRunner, as described
 in Etzioni et.
 al.
 (2005)
\begin_inset CommandInset citation
LatexCommand cite
key "Etzioni200591"

\end_inset

 and Banko et.
 al.
 (2007)
\begin_inset CommandInset citation
LatexCommand cite
key "Banko07openinformation"

\end_inset

, respectively.
 Their research in providing a structured semantic representation for unstructur
ed relations gave us the initial idea for constructing a unified representation
 of important semantic and lexical elements of the play.
 
\end_layout

\begin_layout Section
Current Approach
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Graphics
	filename Images/StageCoachInMemory.png
	scale 40

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Graphics
	filename Images/TraversalSystem.png
	scale 40

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Graphics
	filename Images/LineClass.png
	scale 40

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Graphics
	filename Images/AdditionalExtraction.png
	scale 40
	rotateOrigin center

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Architecture
\end_layout

\begin_layout Standard
StageCoach [see 
\begin_inset Formula $\mathtt{Figure}$
\end_inset

 
\begin_inset Formula $\mathtt{1}$
\end_inset

] encapsulates the fundamental models of a theatrical work in several classes:
 
\begin_inset Formula $\mathtt{StageDirection}$
\end_inset

, 
\begin_inset Formula $\mathtt{Quote}$
\end_inset

, 
\begin_inset Formula $\mathtt{Character}$
\end_inset

, and 
\begin_inset Formula $\mathtt{Action}$
\end_inset

.
 The most fundamental unit of representation in our play architecture is
 the abstract class 
\begin_inset Formula $\mathtt{Line}$
\end_inset

, from which both 
\begin_inset Formula $\mathtt{StageDirection}$
\end_inset

 and 
\begin_inset Formula $\mathtt{Quote}$
\end_inset

 inherit.
 Through these two classes, we capture the distinction between scene-specific
 and character-specific context - two ideas which are crucial in understanding
 the semantic scope of the theatrical work [see 
\begin_inset Formula $\mathtt{Figure}$
\end_inset

 
\begin_inset Formula $\mathtt{3}$
\end_inset

].
 
\end_layout

\begin_layout Standard
In order to represent temporal segments (e.g.
 ranges across lines, scenes, and acts, and arbitrary periods), we have
 defined an abstract unit of time 
\begin_inset Formula $\mathtt{Unit}$
\end_inset

 that allows for information extraction on user-defined units of time (e.g.
 number of character mentions, relations for a certain character).
 We have also started to develop a traversal architecture that moves between
 these units of time efficiently by associating acts and scenes to the Global
 Line List, a list structure which holds the entire line-by-line representation
 of the play.
 The conceptual layout of the architecture is partially shown in 
\begin_inset Formula $\mathtt{Figure}$
\end_inset

 
\begin_inset Formula $\mathtt{2}$
\end_inset

.
\end_layout

\begin_layout Standard
We have built the basic classes of StageCoach in Java and a preprocessing
 script in Ruby, which together allow us to represent Chekhov plays that
 conform to the Project Gutenberg format.
 The Ruby script currently handles tasks unrelated to the information content
 of the play; it removes the Project Gutenberg headers and footers, html
 tags, newlines, etc.
 We will expand this to make plays by other authors conform to the format
 our parser expects (by changing “Dramatis Personae” to “CHARACTERS,” for
 example).
 We eventually expect to integrate this pre-processing step into the existing
 StageCoach architecture.
 
\end_layout

\begin_layout Subsection
Network Extraction
\end_layout

\begin_layout Standard
Once we have successfully parsed a given play and stored its information
 in the architecture discussed above, we will be able to use a number of
 different approaches to generate social networks.
 Because of the highly structured nature of plays, we will be able to assume
 that the attribution of quotes and stage directions, as well as the mapping
 from Lines into Scenes and Scenes into Acts, is nearly completely correct
 once we’ve handled edge cases.
 This will allow us to focus solely on comparing and evaluating different
 methods of social network generation, rather than on underlying errors
 which would otherwise be propagated.
\end_layout

\begin_layout Standard
The most basic metric for relatedness in a play is the number of times,
 or amount of time, two characters spend on stage together.
 We’ll call this “coappearance”; for theatrical works with multiple scenes,
 this is readily determined from our model for each pair of characters.
 Building off of Elson, we plan to next try an adjacency-based network generatio
n model, which looks not for lines spoken in the same scene, but within
 some specified word distance from each other.
\end_layout

\begin_layout Standard
An extension to this will make use of relation extraction, applied both
 to dialogue and to actions/stage directions.
 We can manually assign weights to the importance of different types of
 extracted relations, or we can use the outputs of other methods to learn
 which relations correlate with observed relationships.
 The relations can be used to produce continuous weightings on relationship
 edges, or could be valuable as annotations placed on the edges generated
 by other methods.
\end_layout

\begin_layout Subsection
Evaluation
\end_layout

\begin_layout Standard
Our formative evaluation methods will necessarily be qualitative and manual.
 We will need to exploit the modularity of our architecture to run many
 different social network construction techniques, beginning with the 
\begin_inset Quotes eld
\end_inset

low-hanging fruit
\begin_inset Quotes erd
\end_inset

 of very intuitive approaches such as scene coappearance.
 As we try new methods, we will use theatrical works with which we are familiar
 to establish a set of results that 
\begin_inset Quotes eld
\end_inset

looks right
\begin_inset Quotes erd
\end_inset

 before testing the methods on other works.
 
\end_layout

\begin_layout Standard
We will need a gold standard, though, to perform a quantitative, summative
 evaluation and determine the success of our work.
 This will still need to be manual, as the only gold standard we can hope
 for is human understanding of the relationships presented.
 To do this, we will select 3 or 4 plays, or perhaps 3 or 4 Acts from plays
 that we will use as our test dataset.
 We can ask annotators to provide “yes” or “no” answers regarding whether
 each pair of characters has a relationship.
 We could also ask for a set of key identifying tags about each character-charac
ter relationship (e.g.
 mark down if there is a familial relationship, for example).’
\end_layout

\begin_layout Standard
We’ll then need to measure Cohen's kappa for our annotators and map our
 continuously weighted edges to binary labels on each relationship.
 With these, we’ll easily be able to compute precision and recall over the
 presence and absence of relationships.
 For specific relationships (if we include that approach), we will be much
 more interested in recall as long as the lists of labels are short enough
 for a user to easily pick out key relationships.
\end_layout

\begin_layout Section
Obstacles
\end_layout

\begin_layout Standard
The first obstacle we have encountered is inconsistent formatting for certain
 input plays, an issue which results in incorrect data representation in
 StageCoach's parsing system [see 
\begin_inset Formula $\mathtt{Figure}$
\end_inset

 
\begin_inset Formula $4$
\end_inset

].
 These inconsistencies prevented us from generalizing the initial parsing
 steps, but we hope that by expanding the preprocessing script we can make
 this critical step fairly robust.
\end_layout

\begin_layout Standard
Once we have the data structure fully functional and the parser operating
 smoothly, the biggest hurdle will be evaluation, both formative and summative.
 In our formative evaluation, it is simply infeasible to take a thorough
 quantitative approach for every extraction method we would like to test.
 We can personally annotate a few development examples to use as targets,
 but in the end we’ll be doing a lot of evaluation by inspection to improve
 our results from run to run.
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintAll"
bibfiles "LitReview_Biblio"
options "bibtotoc,plain"

\end_inset


\end_layout

\end_body
\end_document
